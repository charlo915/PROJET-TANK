/**
  ******************************************************************************
  * @file    stm32l1xx_it.c 
  * @author  MCD Application Team
  * @version V1.2.0
  * @date    11-April-2014
  * @brief   Main Interrupt Service Routines.
  *          This file provides template for all exceptions handler and 
  *          peripherals interrupt service routine.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "stm32l1xxV2_it.h"
   
/** @addtogroup Template
  * @{
  */

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/  
    
    extern uint32_t etat_led; 
    extern float distance ; 
    extern uint8_t cnt_max;
    extern uint8_t n; 
    extern char chaine; 
    extern float distance; 
/* Private function prototypes -----------------------------------------------*/
 
 extern void RX_BYTE(void); 
 
/* Private functions ---------------------------------------------------------*/




/******************************************************************************/
/*            Cortex-M3 Processor Exceptions Handlers                         */
/******************************************************************************/

/**
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}

/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
}
extern uint8_t var;
/**
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
}

/**
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
}

/**
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
}

/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}

/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}

/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}

/**
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
}

/******************************************************************************/
/*                 STM32L1xx Peripherals Interrupt Handlers                   */
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32l1xx_xx.s).                                            */
/******************************************************************************/
/**
  * @brief  This function handles PPP interrupt request.
  * @param  None
  * @retval None
  */
/*void PPP_IRQHandler(void)
{
}*/

void TIM2_IRQHandler(void)
{
    TIM2->SR &=~ TIM_SR_UIF;
              if(etat_led==1)
                {      
                  GPIOB->ODR |=(1<<2);
                  etat_led =0; 
                }
              else
                {
                  GPIOB->ODR &=~(1<<2);
                  etat_led = etat_led+1; 
                }
}

void USART3_IRQHandler(void)
{
  
   chaine = USART3->DR; 
   
  
     switch(chaine)
     {
         case '1' :  
              if(distance<1.5)
              {
                //active la marche avant PB6
                TIM4->CR1 |= (1<<0); 
                TIM4->CCER |= (1<<4);
                GPIOB->ODR |= (1<<8); // turn the LED ON - PB8
                //printf("chaine %c\n", chaine); 
                break;
              }
              else 
              {
                  //arret marche avant
               TIM4->CR1 &=~ (1<<0);
               TIM4->CCER &=~(1<<4); //tim4 ch1
               break;
              }
                
        
       case '2' :  
      
                //active la marche arriere PB7
                TIM4->CR1 |= (1<<0); 
                TIM4->CCER |= (1<<0); // tim4_ch1
                GPIOB->ODR |= (1<<9); //turn the LED ON -PB9
              break;
        
      case '3' : 
                //tourne à gauche 
                TIM3->CR1 |=(1<<0); // active compteur timer moteur
                TIM3->CCER |= (1<<4); 
                TIM2->CR1 |= (1<<0); // active compteur timer clignotement led
                break;
           
      
      
      case '4' :   
                //tourne à droite
                TIM3->CR1 |= (1<<0); 
                TIM3->CCER |= (1<<0); // tim3_ch1
                TIM2->CR1 |= (1<<0); //active timer clignotement led
              break;      
     
     case '5' : //arret moteurs traction + led         
                //arret marche avant
               TIM4->CR1 &=~ (1<<0);
               TIM4->CCER &=~(1<<4); //tim4 ch1 
               //arret marche arriere
               TIM4->CR1 &=~ (1<<0);
               TIM4->CCER &=~(1<<0); //tim4 ch1 
                            
               GPIOB->ODR &=~(1<<8); // turn the LED OFF PB8-marche avant
               GPIOB->ODR &=~(1<<9); //turn the LED OFF PB9 - marche arrière
            break; 
            
      case '7' :            
               // arret moteur direction + led
                //arret direction droite
               TIM3->CR1 &=~ (1<<0);
               TIM3->CCER &=~ (1<<0);//tim3 ch1
               //arret direction gauche 
               TIM3->CR1 &=~ (1<<0);
               TIM3->CCER &=~ (1<<4);//tim3 ch2
                
               TIM2->CR1 &=~(1<<0); // arret timer clignotement led 
               GPIOB->ODR &=~(1<<2); 
             break;
                
     }
   
     /*else 
   {
                // arret moteur direction + led
                //arret direction droite
               TIM3->CR1 &=~ (1<<0);
               TIM3->CCER &=~ (1<<0);//tim3 ch1
               //arret direction gauche 
               TIM3->CR1 &=~ (1<<0);
               TIM3->CCER &=~ (1<<4);//tim3 ch2
               
               //arret moteurs traction + led         
                //arret marche avant
               TIM4->CR1 &=~ (1<<0);
               TIM4->CCER &=~(1<<4); //tim4 ch1 
               //arret marche arriere
               TIM4->CR1 &=~ (1<<0);
               TIM4->CCER &=~(1<<0); //tim4 ch1 
               
   }*/
   
  USART3->SR &=~ USART_SR_RXNE; 
  
}


/**
  * @}
  */ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
